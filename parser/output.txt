Attempting to parse file: ../example_traverse_target/src/main.rs
Parsing file: ../example_traverse_target/src/main.rs
Successfully parsed file content.
    Found struct_item node!
    Extracted Struct: StructInfo { name: "Paddle", is_pub: false, doc_comment: None, attributes: ["#[derive(Component)]"], fields: [], start_position: 2864, end_position: 2899 }
    Start Position: 2864, End Position: 2899
    Code Snippet:
#[derive(Component)]
struct Paddle;
    --- End Code Snippet ---
    Found struct_item node!
    Extracted Struct: StructInfo { name: "Ball", is_pub: false, doc_comment: None, attributes: ["#[derive(Component)]"], fields: [], start_position: 2901, end_position: 2934 }
    Start Position: 2901, End Position: 2934
    Code Snippet:
#[derive(Component)]
struct Ball;
    --- End Code Snippet ---
    Found struct_item node!
    Extracted Struct: StructInfo { name: "Velocity", is_pub: false, doc_comment: None, attributes: ["#[derive(Component, Deref, DerefMut)]"], fields: [], start_position: 2936, end_position: 2996 }
    Start Position: 2936, End Position: 2996
    Code Snippet:
#[derive(Component, Deref, DerefMut)]
struct Velocity(Vec2);
    --- End Code Snippet ---
    Found struct_item node!
    Extracted Struct: StructInfo { name: "CollisionEvent", is_pub: false, doc_comment: None, attributes: ["#[derive(Event, Default)]"], fields: [], start_position: 2998, end_position: 3046 }
    Start Position: 2998, End Position: 3046
    Code Snippet:
#[derive(Event, Default)]
struct CollisionEvent;
    --- End Code Snippet ---
    Found struct_item node!
    Extracted Struct: StructInfo { name: "Brick", is_pub: false, doc_comment: None, attributes: ["#[derive(Component)]"], fields: [], start_position: 3048, end_position: 3082 }
    Start Position: 3048, End Position: 3082
    Code Snippet:
#[derive(Component)]
struct Brick;
    --- End Code Snippet ---
    Found struct_item node!
    Extracted Struct: StructInfo { name: "CollisionSound", is_pub: false, doc_comment: None, attributes: ["#[derive(Resource, Deref)]"], fields: [], start_position: 3084, end_position: 3154 }
    Start Position: 3084, End Position: 3154
    Code Snippet:
#[derive(Resource, Deref)]
struct CollisionSound(Handle<AudioSource>);
    --- End Code Snippet ---
    Found struct_item node!
    Extracted Struct: StructInfo { name: "Collider", is_pub: false, doc_comment: Some("// Default must be implemented to define this as a required component for the Wall component below"), attributes: ["#[derive(Component, Default)]"], fields: [], start_position: 3156, end_position: 3301 }
    Start Position: 3156, End Position: 3301
    Code Snippet:
// Default must be implemented to define this as a required component for the Wall component below
#[derive(Component, Default)]
struct Collider;
    --- End Code Snippet ---
    Found struct_item node!
    Extracted Struct: StructInfo { name: "Wall", is_pub: false, doc_comment: Some("// This is a collection of the components that define a \"Wall\" in our game"), attributes: ["#[derive(Component)]", "#[require(Sprite, Transform, Collider)]"], fields: [], start_position: 3303, end_position: 3451 }
    Start Position: 3303, End Position: 3451
    Code Snippet:
// This is a collection of the components that define a "Wall" in our game
#[derive(Component)]
#[require(Sprite, Transform, Collider)]
struct Wall;
    --- End Code Snippet ---
    Found struct_item node!
    Extracted Struct: StructInfo { name: "Score", is_pub: false, doc_comment: Some("// This resource tracks the game's score"), attributes: ["#[derive(Resource, Deref, DerefMut)]"], fields: [], start_position: 5665, end_position: 5763 }
    Start Position: 5665, End Position: 5763
    Code Snippet:
// This resource tracks the game's score
#[derive(Resource, Deref, DerefMut)]
struct Score(usize);
    --- End Code Snippet ---
    Found struct_item node!
    Extracted Struct: StructInfo { name: "ScoreboardUi", is_pub: false, doc_comment: None, attributes: ["#[derive(Component)]"], fields: [], start_position: 5765, end_position: 5806 }
    Start Position: 5765, End Position: 5806
    Code Snippet:
#[derive(Component)]
struct ScoreboardUi;
    --- End Code Snippet ---
Attempting to parse file: ../example_traverse_target/src/stepping.rs
Parsing file: ../example_traverse_target/src/stepping.rs
Successfully parsed file content.
    Found struct_item node!
    Extracted Struct: StructInfo { name: "DebugSchedule", is_pub: false, doc_comment: Some("/// being run."), attributes: ["#[derive(Debug, Hash, PartialEq, Eq, Clone, ScheduleLabel)]"], fields: [], start_position: 67, end_position: 449 }
    Start Position: 67, End Position: 449
    Code Snippet:
/// Independent [`Schedule`] for stepping systems.
///
/// The stepping systems must run in their own schedule to be able to inspect
/// all the other schedules in the [`App`].  This is because the currently
/// executing schedule is removed from the [`Schedules`] resource while it is
/// being run.
#[derive(Debug, Hash, PartialEq, Eq, Clone, ScheduleLabel)]
struct DebugSchedule;
    --- End Code Snippet ---
    Found struct_item node!
    Extracted Struct: StructInfo { name: "SteppingPlugin", is_pub: true, doc_comment: Some("/// Plugin to add a stepping UI to an example"), attributes: ["#[derive(Default)]"], fields: [FieldInfo { name: "schedule_labels", type_name: "Vec<InternedScheduleLabel>", is_pub: false }, FieldInfo { name: "top", type_name: "Val", is_pub: false }, FieldInfo { name: "left", type_name: "Val", is_pub: false }], start_position: 451, end_position: 623 }
    Start Position: 451, End Position: 623
    Code Snippet:
/// Plugin to add a stepping UI to an example
#[derive(Default)]
pub struct SteppingPlugin {
    schedule_labels: Vec<InternedScheduleLabel>,
    top: Val,
    left: Val,
}
    --- End Code Snippet ---
    Fields:
      - Name: schedule_labels, Type: Vec<InternedScheduleLabel>, Pub: false
      - Name: top, Type: Val, Pub: false
      - Name: left, Type: Val, Pub: false
    Found struct_item node!
    Extracted Struct: StructInfo { name: "State", is_pub: false, doc_comment: Some("/// Struct for maintaining stepping state"), attributes: ["#[derive(Resource, Debug)]"], fields: [FieldInfo { name: "systems", type_name: "Vec<(InternedScheduleLabel, NodeId, usize)>", is_pub: false }, FieldInfo { name: "ui_top", type_name: "Val", is_pub: false }, FieldInfo { name: "ui_left", type_name: "Val", is_pub: false }], start_position: 2284, end_position: 2539 }
    Start Position: 2284, End Position: 2539
    Code Snippet:
/// Struct for maintaining stepping state
#[derive(Resource, Debug)]
struct State {
    // vector of schedule/nodeid -> text index offset
    systems: Vec<(InternedScheduleLabel, NodeId, usize)>,

    // ui positioning
    ui_top: Val,
    ui_left: Val,
}
    --- End Code Snippet ---
    Fields:
      - Name: systems, Type: Vec<(InternedScheduleLabel, NodeId, usize)>, Pub: false
      - Name: ui_top, Type: Val, Pub: false
      - Name: ui_left, Type: Val, Pub: false
    Found struct_item node!
    Extracted Struct: StructInfo { name: "SteppingUi", is_pub: false, doc_comment: None, attributes: ["#[derive(Component)]"], fields: [], start_position: 2787, end_position: 2826 }
    Start Position: 2787, End Position: 2826
    Code Snippet:
#[derive(Component)]
struct SteppingUi;
    --- End Code Snippet ---
-----> Found source_file
-----> Found line_comment
-----> Found //
-----> Found outer_doc_comment_marker
-----> Found /
-----> Found doc_comment
-----> Found attribute_item
-----> Found #
-----> Found [
-----> Found attribute
-----> Found identifier
-----> Found token_tree
-----> Found (
-----> Found identifier
-----> Found ,
-----> Found identifier
-----> Found ,
-----> Found identifier
-----> Found ,
-----> Found identifier
-----> Found ,
-----> Found identifier
-----> Found ,
-----> Found identifier
-----> Found ,
-----> Found identifier
-----> Found ,
-----> Found identifier
-----> Found ,
-----> Found identifier
-----> Found ,
-----> Found identifier
-----> Found )
-----> Found ]
-----> Found attribute_item
-----> Found #
-----> Found [
-----> Found attribute
-----> Found identifier
-----> Found token_tree
-----> Found (
-----> Found identifier
-----> Found ,
-----> Found identifier
-----> Found )
-----> Found ]
Found struct_item node!
Extracted Struct: StructInfo { name: "AnimationGraphHandle", is_pub: true, doc_comment: Some("/// A [`Handle`] to the [`AnimationGraph`] to be used by the [`AnimationPlayer`](crate::AnimationPlayer) on the same entity."), attributes: ["#[derive(Component, Clone, Debug, Default, Deref, DerefMut, Reflect, PartialEq, Eq, From)]", "#[reflect(Component, Default)]"], fields: [], start_position: 9, end_position: 340 }
-----> Found visibility_modifier
-----> Found pub
-----> Found struct
-----> Found type_identifier
-----> Found ordered_field_declaration_list
-----> Found (
-----> Found visibility_modifier
-----> Found pub
-----> Found generic_type
-----> Found type_identifier
-----> Found type_arguments
-----> Found <
-----> Found type_identifier
-----> Found >
-----> Found )
-----> Found ;
Found struct_item node!
Extracted Struct: StructInfo { name: "AnotherStruct", is_pub: false, doc_comment: None, attributes: [], fields: [FieldInfo { name: "field1", type_name: "i32", is_pub: false }], start_position: 350, end_position: 407 }
-----> Found struct
-----> Found type_identifier
-----> Found field_declaration_list
-----> Found {
-----> Found field_declaration
-----> Found field_identifier
-----> Found :
-----> Found primitive_type
-----> Found ,
-----> Found }
Single file parsing complete.
